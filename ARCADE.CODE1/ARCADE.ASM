         keep  /apw.code/arcade.code/arcade.e         mcopy /apw.code/arcade.code/arcade.macros         copy  /apw.code/arcade.code/globals.asm         copy  2/ainclude/e16.prodos         copy  2/ainclude/e16.quickdrawHello    start         using HWdata         lda   #0         sta   >HelloErr                 indicate to shell:no errors         jsr   Startup                  startup tools         bcc   DoMain                   branch if no startup errors         lda   #1                       err: indicate error to shell         sta   >HelloErr         bra   done                     and shut downDoMain   jsr   Main                     put hello, world to screendone     jsr   shutdown                 shut down tools         lda   >HelloErr                 indicate to shell if errors         _Quit QuitData                 return to calling program         endtools    startStartUp  entry         using StartData         phk                            get code bank for data bank         plb                            to access code data easily         _TLStartup                     start tool locator         wordresult         _MMStartup                     Start memory manager         jsr   checkcarry               check carry for error         pla                            pull out id # off stack         sta   MasterID                 ID assigned by system loader         ora   #$0100                   AUX ID field = 1         sta   OurID                    ID for requesting additional memory         _MTStartup                     start miscellaneous toolsEMdp     equ   $300                     4 direct pages for tools these are them         Longresult         pushLong #$400                 4 pages ($400 bytes)         pushWord OurID                 assign to our aux ID         pushWord #$C005                Lock/fix/pg-align/specf-bank         pushlong #0                    specify bank 0         _NewHandle         jsr   checkcarry               check carry for error         pullLong HandleLoc             pull Handle and store at handleLoc         lda   [HandleLoc]              derefence handle to get pointer         sta   ToolsDP                  fixed pointer so get DP         pushword ToolsDP               dp to use         pushword #graphicMode          $80:640 mode; $00:320 mode         pushword #160                  scanLine width: 160 bytes/Line         Pushword MasterID         _QDStartup         jsr   Checkcarry               check carry for error         lda   toolsDP         clc                            prepare to add         adc   #EMdp                    skip past QD dp         pha                            dp to use         pushword #0                    queue size: use default         pushword #0                    x clamp min         pushword #XClampMax            x clamp max: 320 or 640         pushword #0                    y clamp min         pushword #200                  y clamp max         pushword MasterID         _EMStartup         jsr   Checkcarry               check carry for errorRAMtools PushLong #ToolTable            ptr: list of tools to load         _LoadTools                     Load Tools         bcc   StartRest                branch if loaded OK         cmp   #VolumeNotFound         beq   ReqVol                   branch if prodos error: request volume         jmp   fatalError               else fatal errorReqVol   _Get_Boot_Vol GBVdata          get name of boot volume         wordresult         pushword #200                  x pos of box         pushword #50                   y pos of box         pushLong #ReqPrompt            prompt         pushLong #bootVol              name of missing boot volume         pushLong #OKmsg                'OK'         pushLong #QuitMsg              'Quit'         _TLMountVolume                 prompt to mount missing vol         pla         cmp   #1                       response: button 1 ? ('OK')         beq   RAMtools                 branch if ('OK') go and try load tools         sec                            else set carry and returnGotoShutDown rts                        to shut down & quitStartRest anop         jsr   checkcarry         rtsshutdown entry         _EMShutdown                    Event Manager         _QDShutDown                    QuickDraw II         _MTShutDown                    Miscellaneous Tools         pushword OurID                 our aux ID         _DisposeAll                    release all its assigned mem         pushword MasterID         _MMShutDown                    Memory Manager         _TLShutdown                    Tool Locator         rtsCheckCarry entry         bcs   FatalError               if carry set: Fatal error         rtsFatalerror anop         pha                            error# in accumulator         pushLong #FailMsg              Fatal shutdown message         _sysFailMgr                    fatal Shutdown;no rts/rtl needed SysFailMgr does not return         endStartData DataMasterID ds    2                        id assigned by memory mgrOurID    entry         ds    2                        modified id for additional memorygraphicMode equ $00                     $80: 640 mode; $00: 320 modeXClampMax equ 320                       x clamp max :640 or 320ToolTable dc   i'(endTTable-StartTTable)/4' # of tools to loadstartTTable dc i'1,$101'                tool locator         dc    i'2,$101'                memory manager         dc    i'3,$101'                misc tools         dc    i'2,$101'                quickdraw         dc    i'6,$100'                event managerendTTable anopGBVdata  dc    i4'BootVol'              ptr to buffer to get name inBootVol  ds    18                       buffer: len/15-char name/ReqPrompt str  'Please insert system disk: 'OKmsg    str   'OK'Quitmsg  str   'Quit'FailMsg  str   'Fatal toolcall error (1st byte is tool#): '         endHWData   dataHelloErr ds    2                        erro returned to shellQuitFlag ds    2                        nonzero: Quit from wait event loopQuitData dc    i4'0'                    quit back to calling program         dc    i'0'                     no restart from memory         endMain     start;this is the main loop of the arcade game program         using DrawPage;init stuff         jsr   InitColors         jsr   InitDrawPage         jsr   InitTerrain         jsr   InitEraseShapes         jsr   InitControl;init terrain screen         stz   NewTerrainX         stz   NewTerrainY         jsr   UpdateTerrain         jsr   InitPlayer;copy play screen from draw page to display screen         jsr   ProcessColors         ldx   #DrawPage         ldy   #$E12000         lda   #$7D00-1         phb                            save data bank         mvn   DrawPage,$E12000         plb                            restore data bank;not implemeted yet;        jsr   InitShapeList;        jsr   InitCritterList;        jsr   InitCritterGrid;main loopWaitEvent anop         jsr   ProcessPlayer;        jsr   ProcessCritterGrid;        jsr   ProcessCritterList;        jsr   ProcessShapeList         jsr   UpdateTerrainScreen         jsr   ProcessColors         jsr   EraseShapes;see if mouse button was pushed and quit         Wordresult         pushword #0         _Button         pla         beq   waitEvent         rts         end