         keep  /apw.code/arcade.code/critter.e         mcopy /apw.code/arcade.code/arcade.macros         copy  /apw.code/arcade.code/globals.asmCritterYoffset gequ $0000CritterXoffset gequ $0000CritterWidth gequ 9CritterHeight gequ 7initcritterGrid start         using GSOSParam         using crittergrid         lda   #^CritterGrid                init temp pointer         sta   TempCritterGrid+2         lda   #CritterGridPath             init GSOSParam         sta   path         sta   cpath         lda   #^CritterGridPath         sta   path+2         sta   cpath+2         lda   #$10000         sta   count         lda   #^$10000         sta   count+2         lda   #CritterGrid         sta   buf         lda   #^CritterGrid         sta   buf+2         jsr   readfile         rtscrittergridpath str 'critter.terrain'         endinitcritterdefinition start         using GSOSParam         using critterdefinition         lda   #CritterDefinitionPath       init GSOSParam         sta   path         sta   cpath         lda   #^CritterDefinitionPath         sta   path+2         sta   cpath+2         lda   #$10000         sta   count         lda   #^$10000         sta   count+2         lda   #CritterDefinition         sta   buf         lda   #^CritterDefinition         sta   buf+2         jsr   readfile         rtscrittergridpath str 'critter.def'         endActivatCritterGrid start         lda   Yloc         sec         sbc   #CritterYoffset         and   #$FF00         sta   YlocGrid         lda   xloc         sec         sbc   #CritterXoffset         and   #$FF00         sta   XlocGrid         sta   XlocGridStart         ldy   #0loop1    ldx   #0                       set counter to zeroloop2    lda   XlocGrid         and   #$FF00         xba         ora   YlocGrid         sta   tempCritterGrid         lda   [tempcrittergrid]         and   #$00FF                   get only one byte, the definition #         beq   skip         xba         phy                            save y         phx                            save x         tay         jsr   addDefinitionToList         lda   [TempCritterGrid]        zero critter grid, remove from grid         and   #$FF00         sta   [TempCritterGrid]         plx                            restore x         ply                            restore yskip     lda   XlocGrid         clc         adc   #$0100         sta   XlocGrid         inx         cpx   #critterWidth            check counter         bne   Loop2         lda   XlocGridStart         sta   XlocGrid         lda   YlocGrid         clc         adc   #$0100         sta   YlocGrid         iny         cpy   #critterHeight           check counter         bne   loop1         rts         endinitCritterList start         using CritterList         ldx   #0loop     lda   #0         sta   >CritterList,x         txa         clc         adc   #$0100         tax         bne   loop         rts         endAddDefinitionToList start         using critterList         using critterDefinition         ldx   #0                       find a spot in critter list to put defloop     lda   >CritterList,x         beq   ok         txa         clc         adc   #$0100         tax         bne   loop         phxok       tya         txy                            put x into y to location         tax                            restore a into x from location         lda   #00FF                    move #$100 bytes         mvn   CritterDefinition,CritterList copy def into list         plx         lda   XlocGrid         sta   >CritterList+2,x         lda   YLocGrid         sta   >CritterList+4,x         rts         endDrawCritterList start         using critterList         using ShapeListData         lda   ListNumber         sta   ListNumberStart         ldx   #0loop     lda   >CritterList,x         and   #$00FF                   get only definition byte         beq   skip         phx         txy         asl   a         tax         jsr   (CritterDefinitionTable,x)         plxskip     txa         clc         adc   #$0100         tax         bne   loop         rtsListNumberStart entry         ds    2         endCollisionCritterList start         using critterList         using ShapeListData         ldy   ListNumberStart         ldx   #0loop     lda   >CritterList,x         and   #$00FF                   get only one byte         beq   skip         lda   ShapeIntersectionList,y         sta   >CritterList+1,xskip     iny                            next shape intersection         iny         txa                            next critter in list         clc         adc   #$0100         tax         bne   loop         rts         endStationaryObject start         using CritterList         tyx         lda   >CritterList+2,x         sta   ShapeXGlobal         sta   CollisionXGlobal         lda   >CritterList+2,x         sta   ShapeYGlobal         sta   CollisionYGlobal         lda   #8         sta   ShapeWidth         sta   CollisionWidth         lda   #16         sta   ShapeHeight         sta   CollisionHeight         lda   #4         sta   Priority         lda   #0         sta   shapeType         lda   #0         sta   ShapeDraw         lda   #0         sta   ShapeStartX         lda   #0         sta   ShapeStartY         lda   #0         sta   ShapeNumber         lda   #0         sta   MaskNumber         jsr   AddToShapeList         lda   >CritterList+1,x         get collision info         and   #$00FF         cmp   #$16         bne   exit         lda   ShapeXGlobal         sta   XlocGrid         lda   ShapeYGlobal         sta   YLocGrid         lda   #1         tay         jsr   AddDefinitionToList         rts         endDrawCritterListTable start         dc    a'null'         dc    a'StationaryObject         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         end         align $10000CritterGrid data Critter         ds    $10000         end         align $10000CritterList data Critter         ds    $10000         end         align $10000CritterDefinition data Critter         ds    $10000         end