         keep  /apw.code/arcade.code/shape.e         mcopy /apw.code/arcade.code/shape.macros         copy  /apw.code/arcade.code/globals.asmDrawShape start;convert from terrain coordinates to terrain screen coordinates;drop through to draw routine         using MultBy160         using DrawPage         lda   ShapeX         sec         sbc   TerrainX         bpl   skip1         lsr   a         lsr   a         lsr   a         lsr   a         ora   #$F000                   make negative         and   #$FFFE                   only even bytes         bra   cont1skip1    lsr   a         lsr   a         lsr   a         lsr   a         and   #$FFFE                   only even bytescont1    sta   ShapeX         lda   ShapeY         sec         sbc   TerrainY         bpl   skip2         lsr   a         lsr   a         lsr   a         ora   #$E000                   make nagative         bra   cont2skip2    lsr   a         lsr   a         lsr   acont2    sta   ShapeY;clip shape to terrain screenCheckX1  lda   ShapeX         cmp   #TerrainScreenWidth         bge   CheckX2         clc         adc   ShapeDrawWidth         cmp   #TerrainScreenWidth         blt   CheckY1         lda   #TerrainScreenWidth         sec         sbc   ShapeX         sta   ShapeDrawWidth         bra   CheckY1CheckX2  clc         adc   ShapeDrawWidth         beq   Exit         cmp   #TerrainScreenWidth         bge   Exit         sta   ShapeDrawWidth         lda   ShapeX         eor   #$FFFF         inc   a         clc         adc   ShapeStartX         sta   ShapeStartX         stz   ShapeXCheckY1  lda   ShapeY         cmp   #TerrainScreenHeight         bge   CheckY2         clc         adc   ShapeDrawHeight         cmp   #TerrainScreenHeight         blt   OK         lda   #TerrainScreenHeight         sec         sbc   ShapeY         sta   ShapeDrawHeight         bra   OKCheckY2  clc         adc   ShapeDrawHeight         beq   Exit         cmp   #TerrainScreenHeight         bge   Exit         sta   ShapeDrawHeight         lda   ShapeY         eor   #$FFFF         inc   a         clc         adc   ShapeStartY         sta   ShapeStartY         stz   ShapeY         bra   okexit     rts                            shape offscreen, do not drawok       anop;convert from terrain screen coordinates to draw page coordinates         lda   ShapeX         clc         adc   #TerrainScreenX         sta   ShapeX         lda   ShapeY         clc         adc   #TerrainScreenY         sta   ShapeY;save draw page under shape to buffer, AND mask, OR shape to draw page;Y = ShapeX + ShapeY * 160         lda   ShapeY         asl   a         tax         lda   ShapeX         clc         adc   MultBy160,x         tay                            save A in Y;ShapeCheckDone = Y + ShapeDrawHeight * 160         lda   ShapeDrawHeight         asl   a         tax         tya                            restore A from Y         clc         adc   MultBy160,x         sta   ShapeCheckDone;X = Y         tyx;ShapeDrawPageStep = DrawPageWidth - ShapeDrawWidth         lda   #DrawPageWidth           must be even         sec         sbc   ShapeDrawWidth           must by even         sta   ShapeDrawPageStep;AddressStep = ShapeWidth - ShapeDrawWidth         lda   ShapeWidth               must be even         sec         sbc   ShapeDrawWidth           must be even         sta   AddressStep;Y = ShapeStartX * ShapeStartY         lda   #0                       product = 0         ldy   #8                       count = 8 (8 bit multiply)mult     lsr   ShapeStartX         bcc   chcnt                    is carry from multiplier         clc         adc   ShapeStartY              yes, product = product + multiplicandchcnt    asl   ShapeStartY         dey         bne   mult         tay                            save in Y         phb                            save data bank register         lda   #^DrawPage               move data bank to draw page         pha         plbloop1    lda   ShapeDrawWidth           ShapeCount = ShapeDrawWidth/2         lsr   a         sta   ShapeCountloop2    anop         lda   |DrawPage,x              get under         sta   (DrawPageStorage)        save under         and   [MaskAddress],y          AND mask         ora   [ShapeAddress],y         OR shape         sta   |DrawPage,x              replace         inc   DrawPageStorage         inc   DrawPageStorage         inx         inx         iny         iny         dec   ShapeCount         bne   Loop2         txa         sta   (AddressStorage)         inc   AddressStorage         inc   AddressStorage         lda   ShapeDrawWidth         sta   (LengthStorage)         inc   LengthStorage         inc   LengthStorage         tya         clc         adc   AddressStep         tay         txa         clc         adc   ShapeDrawPageStep         tax         cpx   ShapeCheckDone         blt   loop1         plb         plb                            restore data bank register         rts         endEraseShapes start         using DrawPage         phb                            save direct page         lda   #^DrawPage               move direct page to draw page         pha         plbloop1    lda   AddressStorage         cmp   #AddressStorageLoc         beq   exit         dec   a         dec   a         sta   AddressStorage         dec   LengthStorage         dec   LengthStorage         lda   (LengthStorage)         tay         lda   DrawPageStorage         sec         sbc   (LengthStorage)         sta   DrawPageStorage         lda   (AddressStorage)         taxloop2    dex         dex         dey         dey         lda   (DrawPageStorage),y         sta   |DrawPage,x         cpy   #0         bne   loop2         bra   loop1exit     plb         plb                            restore direct page;drops through and inits storage for reuseInitEraseShapes entry         lda   #DrawPageStorageLoc         sta   DrawPageStorage         lda   #AddressStorageLoc         sta   AddressStorage         lda   #LengthStorageLoc         sta   LengthStorage         rts         endAddToShapeList start         using ShapeListData         ldx   NumberInShapeList         lda   ShapePriority         sta   ShapePrioritylist,x         cmp   MaxShapePriority         blt   skip         sta   MaxShapePriorityskip     lda   ShapeX         sta   ShapeXlist,x         lda   ShapeY         sta   ShapeYlist,x         lda   CollisionX         sta   CollisionXlist,x         lda   CollisionY         sta   CollisionYlist,x         lda   ShapeAddress         sta   ShapeAddress1list,x         lda   ShapeAddress+2         sta   ShapeAddress2list,x         lda   MaskAddress         sta   MaskAddress1list,x         lda   MaskAddress+2         sta   MaskAddress2list,x         lda   ShapeWidth         sta   ShapeWidthlist,x         lda   ShapeHeight         sta   ShapeHeightlist,x         lda   ShapeDrawWidth         sta   ShapeDrawWidthlist,x         lda   ShapeDrawHeight         sta   ShapeDrawHeightlist,x         lda   CollisionWidth         sta   CollisionWidthlist,x         lda   CollisionHeight         sta   CollisionHeightlist,x         lda   ShapeStartX         sta   ShapeStartXlist,x         lda   ShapeStartY         sta   ShapeStartYlist,x         lda   ShapeType         sta   ShapeTypeList,x;        lda   ShapeIntersection;        sta   ShapeIntersection1List,x;        lda   ShapeIntersection+2;        sta   ShapeIntersection2List,x         inx         inx         stx   NumberInShapeList         rts         endClearShapeList start         lda   #0         sta   NumberInShapeList         sta   MaxShapePriority         rts         endDrawShapeList start         using ShapeListData         inc   MaxShapePriority         lda   NumberInShapeList         beq   exit         ldy   #00                      priority zeroloop1    ldx   #00                      first in listloop2    tya         cmp   ShapePrioritylist,x         bne   skip         lda   ShapeXlist,x         sta   ShapeX         lda   ShapeYlist,x         sta   ShapeY         lda   ShapeAddress1list,x         sta   ShapeAddress         lda   ShapeAddress2list,x         sta   ShapeAddress+2         lda   MaskAddress1List,x         sta   MaskAddress         lda   MaskAddress2List,x         sta   MaskAddress         lda   ShapeWidthlist,x         sta   ShapeWidth         lda   ShapeHeightlist,x         sta   ShapeHeight         lda   ShapeDrawWidthlist,x         sta   ShapeDrawWidth         lda   ShapeDrawHeightlist,x         sta   ShapeDrawHeight         lda   ShapeStartXlist,x         sta   shapeStartX         lda   ShapeStartYlist,x         sta   ShapeStartY         phx         phy         jsr   DrawShape         ply         plxskip     inx         inx         cpx   NumberInShapeList         bne   loop2         iny         cpy   MaxShapePriority         check for last priority         bne   loop1exit     rts         endIntersectionShapeList start         using ShapeListData         lda   NumberInShapeList         cmp   #2         bge   start1         rtsstart1   ldx   #0loop1    txy         iny         iny         lda   CollisionXlist,x         sta   CollisionX         lda   CollisionYlist,x         sta   CollisionY         lda   CollisionWidthlist,x         asl   a         asl   a         asl   a         asl   a         dec   a         sta   CollisionWidth         lda   CollisionHeightlist,x         asl   a         asl   a         asl   a         dec   a         sta   CollisionHeight         lda   ShapeTypeList,x         and   #$0080         sta   ShapeTypeloop2    anop         lda   ShapeTypeList,y         and   #$0080         eor   ShapeType         beq   gonoCheckX1  lda   CollisionX         cmp   CollisionXlist,y         bge   CheckX2         clc         adc   CollisionWidth         cmp   CollisionXlist,y         bge   checkY1         lda   CollisionWidthList,y         asl   a         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionXlist,y         cmp   CollisionXList,y         bge   gono         cmp   CollisionX         bge   CheckY1         lda   CollisionWidth         clc         adc   CollisionX         cmp   CollisionX         blt   CheckY1         bra   gonoCheckX2  lda   CollisionWidthList,y         asl   a         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionXlist,y         cmp   CollisionX         bge   CheckY1         lda   CollisionX         clc         adc   CollisionWidth         cmp   CollisionX         bge   gono         cmp   CollisionXlist,y         bge   CheckY1         lda   CollisionWidthList,y         asl   a         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionXlist,y         cmp   CollisionXList,y         blt   CheckY1gono     bra   noCheckY1  lda   CollisionY         cmp   CollisionYlist,y         bge   CheckY2         clc         adc   CollisionHeight         cmp   CollisionYlist,y         bge   yes         lda   CollisionHeightList,y         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionYlist,y         cmp   CollisionYList,y         bge   no         cmp   CollisionY         bge   yes         lda   CollisionHeight         clc         adc   CollisionY         cmp   CollisionY         blt   yes         bra   noCheckY2  lda   CollisionHeightList,y         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionYlist,y         cmp   CollisionY         bge   yes         lda   CollisionY         clc         adc   CollisionHeight         cmp   CollisionY         bge   no         cmp   CollisionYlist,y         bge   yes         lda   CollisionHeightList,y         asl   a         asl   a         asl   a         asl   a         dec   a         clc         adc   CollisionYlist,y         cmp   CollisionYList,y         blt   yes         bra   noyes      lda   ShapeTypeList,x         cmp   ShapeIntersectionList,y         blt   skip2         sta   ShapeIntersectionList,yskip2    lda   ShapeTypeList,y         cmp   ShapeIntersectionList,x         blt   no         sta   ShapeIntersectionList,xno       iny         iny         cpy   NumberInShapeList         bge   over1         jmp   loop2over1    inx         inx         inx         inx         cpx   NumberInShapeList         bge   over2         dex         dex         jmp   loop1over2    rts         end