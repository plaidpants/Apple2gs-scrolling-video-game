         keep  /apw.code/arcade.code/arcade.e         mcopy /apw.code/arcade.code/arcade.macros         copy  /apw.code/arcade.code/globals.asm         copy  2/ainclude/e16.prodos         copy  2/ainclude/e16.quickdrawHello    start         using HWdata         stz   HelloErr                 indicate to shell:no errors         jsr   Startup                  startup tools         bcc   DoMain                   branch if no startup errors         lda   #1                       err: indicate error to shell         sta   HelloErr         bra   done                     and shut downDoMain   jsr   Main                     put hello, world to screendone     jsr   shutdown                 shut down tools         lda   HelloErr                 indicate to shell if errors         _Quit QuitData                 return to calling program         endtools    startStartUp  entry         using StartData         phk                            get code bank for data bank         plb                            to access code data easily         _TLStartup                     start tool locator         wordresult         _MMStartup                     Start memory manager         jsr   checkcarry               check carry for error         pla                            pull out id # off stack         sta   MasterID                 ID assigned by system loader         ora   #$0100                   AUX ID field = 1         sta   OurID                    ID for requesting additional memory         _MTStartup                     start miscellaneous toolsEMdp     equ   $300                     4 direct pages for tools these are them         Longresult         pushLong #$400                 4 pages ($400 bytes)         pushWord OurID                 assign to our aux ID         pushWord #$C005                Lock/fix/pg-align/specf-bank         pushlong #0                    specify bank 0         _NewHandle         jsr   checkcarry               check carry for error         pullLong HandleLoc             pull Handle and store at handleLoc         lda   [HandleLoc]              derefence handle to get pointer         sta   ToolsDP                  fixed pointer so get DP         pushword ToolsDP               dp to use         pushword #graphicMode          $80:640 mode; $00:320 mode         pushword #160                  scanLine width: 160 bytes/Line         Pushword MasterID         _QDStartup         jsr   Checkcarry               check carry for error         lda   toolsDP         clc                            prepare to add         adc   #EMdp                    skip past QD dp         pha                            dp to use         pushword #0                    queue size: use default         pushword #0                    x clamp min         pushword #XClampMax            x clamp max: 320 or 640         pushword #0                    y clamp min         pushword #200                  y clamp max         pushword MasterID         _EMStartup         jsr   Checkcarry               check carry for error;        _initCursor                    init cursor for ReqVol boxRAMtools PushLong #ToolTable            ptr: list of tools to load         _LoadTools                     Load Tools         bcc   StartRest                branch if loaded OK         cmp   #VolumeNotFound         beq   ReqVol                   branch if prodos error: request volume         jmp   fatalError               else fatal errorReqVol   _Get_Boot_Vol GBVdata          get name of boot volume         wordresult         pushword #200                  x pos of box         pushword #50                   y pos of box         pushLong #ReqPrompt            prompt         pushLong #bootVol              name of missing boot volume         pushLong #OKmsg                'OK'         pushLong #QuitMsg              'Quit'         _TLMountVolume                 prompt to mount missing vol         pla         cmp   #1                       response: button 1 ? ('OK')         beq   RAMtools                 branch if ('OK') go and try load tools         sec                            else set carry and returnGotoShutDown rts                        to shut down & quitStartRest anop;        _QDAuxStartup         jsr   checkcarry         rtsshutdown entry         _EMShutdown                    Event Manager         _QDAuxShutDown                 QD Aux         _QDShutDown                    QuickDraw II         _MTShutDown                    Miscellaneous Tools         pushword OurID                 our aux ID         _DisposeAll                    release all its assigned mem         pushword MasterID         _MMShutDown                    Memory Manager         _TLShutdown                    Tool Locator         rtsCheckCarry entry         bcs   FatalError               if carry set: Fatal error         rtsFatalerror anop         pha                            error# in accumulator         pushLong #FailMsg              Fatal shutdown message         _sysFailMgr                    fatal Shutdown;no rts/rtl needed SysFailMgr does not return         endStartData DataMasterID ds    2                        id assigned by memory mgrOurID    entry         ds    2                        modified id for additional memorygraphicMode equ $00                     $80: 640 mode; $00: 320 modeXClampMax equ 320                       x clamp max :640 or 320ToolTable dc   i'(endTTable-StartTTable)/4' # of tools to loadstartTTable dc i'1,$101'                tool locator         dc    i'2,$101'                memory manager         dc    i'3,$101'                misc tools         dc    i'2,$101'                quickdraw;        dc    i'18,$100'               quickdraw aux         dc    i'6,$100'                event managerendTTable anopGBVdata  dc    i4'BootVol'              ptr to buffer to get name inBootVol  ds    18                       buffer: len/15-char name/ReqPrompt str  'Please insert system disk: 'OKmsg    str   'OK'Quitmsg  str   'Quit'FailMsg  str   'Fatal toolcall error (1st byte is tool#): '         endcontrol  startptrig    equ   $00c070paddlo   equ   $00c063pread    entry         ldy   #$FF00         lda   >ptrig         nop         noppread2   lda   >paddlo,X         bpl   rst2d         iny         bne   pread2         deyrst2d    tya         and   #$00ff         tay         rtsjoystick entry         ldx   #0000         jsr   pread         cpy   #$07                     check for left         bge   right         lda   Xloc         sec         sbc   #$0020         sta   XlocNew         bra   updownright    cpy   #$f7         blt   updown         lda   Xloc         clc         adc   #$0020         sta   XlocNewupdown   ldx   #0001         jsr   pread         cpy   #$07         bge   down         lda   Yloc         sec         sbc   #$0020         sta   YlocNew         bra   donedown     cpy   #$f7         blt   done         lda   Yloc         clc         adc   #$0020         sta   YlocNewdone     anop         jmp   MoveTerrainkeyboard2 entry         lda   >$C000                   keyboard port         and   #$00FF                   low byte only         ora   #$0080                   always read         cmp   #$d4                     t         bne   next11         lda   Yloc         sec         sbc   #$0020         sta   YlocNew         jmp   MoveTerrainnext11   cmp   #$c2                     b         bne   next12         lda   Yloc         clc         adc   #$0020         sta   YlocNew         bra   done10next12   cmp   #$c6                     f         bne   next13         lda   Xloc         sec         sbc   #$0020         sta   XlocNew         bra   done10next13   cmp   #$c8                     h         bne   next14         lda   Xloc         clc         adc   #$0020         sta   XlocNew         bra   done10next14   cmp   #$d2                     r         bne   next15         lda   Xloc         sec         sbc   #$0020         sta   XlocNew         lda   Yloc         sec         sbc   #$0020         sta   YlocNew         bra   done10next15   cmp   #$d9                     y         bne   next16         lda   Xloc         clc         adc   #$0020         sta   XlocNew         lda   Yloc         sec         sbc   #$0020         sta   YlocNew         bra   done10next16   cmp   #$d6                     v         bne   next17         lda   Xloc         sec         sbc   #$0020         sta   XlocNew         lda   Yloc         clc         adc   #$0020         sta   YlocNew         bra   done10next17   cmp   #$ce                     n         bne   next18         lda   Xloc         clc         adc   #$0020         sta   XlocNew         lda   Yloc         clc         adc   #$0020         sta   YlocNewdone10   jmp   MoveTerrainnext18   rts         endMain     start         using HWdata         lda   #$0000         sta   Xloc         sta   Yloc         sta   XlocNew         sta   YlocNew         jsr   initColors         jsr   initBackDrop         jsr   initterrain         jsr   initShape         jsr   initShapeStorage         jsr   initCritterGrid         jsr   initCritterListWaitEvent anop         lda   QuitFlag         bne   done         jsr   CycleColors         jsr   UpdateShapeStorage         jsr   Joystick         jsr   ClearShapeList         jsr   DrawShapes         jsr   DrawCritterList         jsr   DrawCritterGrid         lda   >$00c060         bmi   cont         lda   #0         sta   >button0cont     anop         jsr   CheckIntersection;        jsr   ShapesCollision         jsr   CollisionCritterList         jsr   CollisionCritterGrid         jsr   DrawShapeList         lda   >$00c060         bmi   cont1         lda   #0         sta   >button0cont1    anop         jsr   UpdateScreen         lda   >$00c060         bmi   cont2         lda   #0         sta   >button0cont2    anop         Wordresult         pushword #0                    Button number 0         _Button                        get state of mouse button         pla         beq   waitEvent                no event, continue pollingdone     rts                            return to command shell         endDrawShapes start         using Bullet         lda   >$00c060                 ;shot         bpl   cont         lda   Button0         bne   ship         lda   #$FFFF         sta   Button0         lda   Xloc         clc         adc   #$03C0         sta   BulletX         lda   Yloc         clc         adc   #$02C0         sta   BulletY         lda   XlocPlus         asl   a         clc         adc   XLocPlus         sta   BulletXPlus         lda   Ylocplus         asl   a         clc         adc   YLocPlus         sta   BulletYplus         lda   #0         sta   BulletAnimation         lda   #40         sta   BulletLife         lda   #16+$80         sta   BulletType         jsr   AddBulletToCritterList         bra   shipcont     lda   #0         sta   >button0ship     lda   Xlocplus                 ship         cmp   #$0000         beq   check3         bpl   check1         bmi   check2check1   lda   YlocPlus         cmp   #$0000         beq   case3         bpl   case1         bmi   case2check2   lda   Ylocplus         cmp   #$0000         beq   case6         bpl   case4         bmi   case5check3   lda   Ylocplus         cmp   #$0000         beq   case9         bpl   case7         bmi   case8case1    ldx   #27         ldy   #11         bra   cont1case2    ldx   #25         ldy   #9         bra   cont1case3    ldx   #23         ldy   #7         bra   cont1case4    ldx   #26         ldy   #10         bra   cont1case5    ldx   #24         ldy   #8         bra   cont1case6    ldx   #22         ldy   #6         bra   cont1case7    ldx   #21         ldy   #5         bra   cont1case8    ldx   #20         ldy   #4         bra   cont1case9    ldx   #20         ldy   #4         bra   cont1cont1    txa         clc         adc   >ShipAna         sta   ShapeNumber         lda   >shipAna         clc         adc   #$0010         cmp   #$0030         bne   cont3         sta   >shipAna         bra   cont4cont3    lda   #0         sta   >shipAnacont4    tya         sta   MaskNumber         lda   #$0380         clc         adc   Xloc         sta   ShapeXglobal         sta   CollisionXglobal         lda   #$0280         clc         adc   Yloc         sta   ShapeYglobal         sta   CollisionYglobal         lda   #16         sta   ShapeWidth         sta   CollisionWidth         lda   #32         sta   ShapeHeight         sta   CollisionHeight         lda   #0         sta   ShapeStartX         sta   ShapeStartY         lda   #2         sta   Priority         lda   #13+$80         sta   shapeType         lda   #0         sta   ShapeDraw         jsr   AddToShapeList         rtsshipana  dc    i2'0'button0  entry         ds    2         endHWData   dataHelloErr ds    2                        erro returned to shellQuitFlag ds    2                        nonzero: Quit from wait event loopQuitData dc    i4'0'                    quit back to calling program         dc    i'0'                     no restart from memory         end