         keep  /apw.code/arcade.code/critter.e         mcopy /apw.code/arcade.code/arcade.macros         copy  /apw.code/arcade.code/globals.asmCritterWidth gequ 9CritterHeight gequ 7InitCritterGrid start         using GSOSParam         using CritterGrid         using CritterDefinition         lda   #CritterGridPath             init GSOSParam         sta   path         lda   #^CritterGridPath         sta   path+2         lda   #$10000         sta   count         lda   #^$10000         sta   count+2         lda   #CritterGrid         sta   buf         lda   #^CritterGrid         sta   buf+2         jsr   readfile         lda   #^CritterGrid                init temp pointer         sta   TempCritterGrid+2         lda   #CritterDefinitionPath       init GSOSParam         sta   path         lda   #^CritterDefinitionPath         sta   path+2         lda   #$10000         sta   count         lda   #^$10000         sta   count+2         lda   #CritterDefinition         sta   buf         lda   #^CritterDefinition         sta   buf+2;        jsr   readfile         rtsCritterGridPath str 'critter.grid'CritterDefinitionPath str 'critter.def'         endProcessCritterGrid start         using CritterList         ldy   #0                       set width and height counters to zero         lda   CritterGridY         and   #$FF00         sta   TempCritterGridYloop1    ldx   #0         lda   CritterGridX         sta   TempCritterGridXloop2    lda   TempCritterGridX         and   #$FF00         xba         ora   TempCritterGridY         sta   TempCritterGrid         lda   [TempCritterGrid]         and   #$00FF                   get only one byte         beq   skip                     if zero, no critter         phy                            save y         phx                            save x         xba         sta   CritterDefinitionNumber         jsr   AddToCritterList;set location of critter in list         ldx   CritterListNumber         lda   TempCritterGridX         sta   >CritterList+2,x         lda   TempCritterGridY         sta   >CritterList+4,x         lda   [TempCritterGrid]        remove critter from grid         and   #$FF00         sta   [TempCritterGrid]         plx                            restore x         ply                            restore yskip     lda   TempCritterGridX         clc         adc   #$0100         sta   TempCritterGridX         inx         cpx   #CritterWidth            check counter         bne   Loop2         lda   TempCritterGridY         clc         adc   #$0100         sta   TempCritterGridY         iny         cpy   #CritterHeight           check counter         bne   loop1         rts         endAddToCritterList start         using CritterList         using CritterDefinition;find spot in critter list to put definition         ldx   #0loop     lda   >CritterList,x         beq   ok         txa         clc         adc   #$0100         tax         bne   loopok       stx   CritterListNumber;put definition in critter list         ldx   CritterDefinitionNumber         ldy   CritterListNumber         lda   #$0100-1                 length         phb         mvn   CritterDefinition,CritterList         plb         rts         endInitCritterList start         using CritterList         ldx   #0loop     lda   #0         sta   >CritterList,x         txa         clc         adc   #$0100         tax         bne   loop         rts         endProcessCritterList start         using CritterList         using ShapeListData         ldx   #0loop     lda   >CritterList,x         and   #$FFFE         beq   skip         stx   CritterListNumber         tax         jsr   (CritterDefinitionTable,x)         ldx   CritterListNumberskip     txa         clc         adc   #$0100         tax         bne   loop         rts         endnull     start         rts         endCritterProcedure1 start         using CritterList         using ShapeListData         using CritterDefinition         ldx   CritterListNumber         lda   >CritterList+10,x         cmp   #$FFFF         beq   skip1         tay         lda   ShapeCollisionTypeList,y         ldy   #0loop     cmp   >CritterList+12,x        check for explosion         bne   noexp         jmp   explosionnoexp    inx         inx         iny         cpy   #16         bne   loop         ldx   CritterListNumber        reset xskip1    lda   >CritterList+20,x        use timmer or distance deactivate check         beq   distancetimmer   lda   >CritterList+18,x        timmer value         dec   a         sta   >CritterList+18,x         bne   skip2         jmp   deactivatedistance lda   >CritterList+2,x         sec         sbc   ShipX         bpl   notneg1         eor   #$FFFF         inc   anotneg1  sta   tempCritter         lda   >CritterList+4,x         sec         sbc   ShipY         bpl   notneg2         eor   #$FFFF         inc   anotneg2  clc         adc   tempCritter         cmp   >CritterList+18,x        deactivate distance         blt   skip2         jmp   deactivateskip2    lda   >CritterList+2,x         move shape X         clc         adc   >CritterList+6,x         sta   >CritterList+2,x         sta   ShapeX         lda   >CritterList+4,x         move shape Y         clc         adc   >CritterList+8,x         sta   >CritterList+4,x         sta   ShapeY         lda   >CritterList+22,x         sta   ShapeClass         lda   >CritterList+24,x         sta   ShapePriority         lda   NumberInShapeList        save for collsion check         sta   >CritterList+10,x         lda   >CritterList+26,x         inc   a         inc   a         and   #$001F         sta   >CritterList+26,x         txa                            animate shape         clc         adc   >CritterList+26,x         tax         lda   >CritterList+28,x         sta   ShapeNumber         jsr   AddToShapeList         rtsdeactivate anop         lda   >CritterList+4,x         Y         and   #$FF00         sta   TempCritterGrid         lda   >CritterList+2,x         X         and   #$FF00         xba         ora   TempCritterGrid         sta   TempCritterGrid         lda   [TempCritterGrid]         and   #$FF00         ora   >CritterList+44,x        deactivate grid value         sta   [TempCritterGrid]         lda   #0         sta   >CritterList,x           remove from list         rtsexplosion anop         lda   >CritterList+2,x         save where shape was         sta   ShapeX         lda   >CritterList+4,x         sta   ShapeY;replace critter with explosion critter         txy                            destination critter list location         lda   >CritterList+46,x        explosion definition         tax         lda   #$0100-1                 length         phb         mvn   CritterDefinition,CritterList         plb         ldx   CritterListNumber        reset x         lda   ShapeX                   put explosion where shape was         sta   >CritterList+2,x         lda   ShapeY         sta   >CritterList+4,x         lda   >CritterList,x         and   #$FFFE         beq   skip         tax         jmp   (CritterDefinitionTable,x)      process explosion insteadskip     rts         endCritterDefinitionTable start         dc    a'null'                  zero represents no critter         dc    a'CritterProcedure1'         dc    a'CritterProcedure1'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         dc    a'null'         end         align $10000CritterGrid data Critter         ds    $10000         end         align $10000CritterList data Critter         ds    $10000         end         align $10000CritterDefinition data Critter;critter definition #0         align $100         dc    i2'0'                    critter procedure number;critter definition #1;your shot         align $100         dc    i2'2'                    critter procedure number         dc    i2'0,0,0,0'              (X,Y) posistion velocity storage         dc    i2'$FFFF'                storage for shape list number         dc    i2'0,0,0,0,0,0,0,0'      16 collision shape types that cause         dc    i2'0,0,0,0,0,0,0,0'      explosion         dc    i2'10'                   deactivate timmer value         dc    i2'0'                    use timmer         dc    i2'0'                    class of shape         dc    i2'0'                    shape drawing priority         dc    i2'0'                    counter for shape animation         dc    i2'8,9,10,11,8,9,10,11'  16 shapes to animate         dc    i2'8,9,10,11,8,9,10,11'         dc    i2'0'                    deactivate grid value         dc    i2'0'                    explosion definition number;critter definition #2;enemy shot         align $100         dc    i2'2'                    critter procedure number         dc    i2'0,0,0,0'              (X,Y) posistion velocity storage         dc    i2'$FFFF'                storage for shape list number         dc    i2'0,0,0,0,0,0,0,0'      16 collision shape types that cause         dc    i2'0,0,0,0,0,0,0,0'      explosion         dc    i2'$0400'                deactivate distance         dc    i2'1'                    use distance         dc    i2'1'                    class of shape         dc    i2'0'                    shape drawing priority         dc    i2'0'                    counter for shape animation         dc    i2'12,13,14,15,12,13,14,15' 16 shapes to animate         dc    i2'12,13,14,15,12,13,14,15'         dc    i2'0'                    deactivate grid value         dc    i2'0'                    explosion definition number         ds    $10000-$0300         end